window.SIDEBAR_ITEMS = {"struct":[["CounterImpl","`Counter` implementation based on `ValueStorage`."],["DequeueDrainIter","Drain iterator over dequeue’s values."],["DequeueImpl","`Dequeue` implementation based on `MapStorage` and `ValueStorage`s."],["DequeueIter","Common iterator over dequeue’s values."],["GetFirstPos","Transpose callback for getting first element of tuple."],["GetSecondPos","Transpose callback for getting second element of tuple."],["GetThirdPos","Transpose callback for getting third element of tuple."],["Interval","Type for interval values: e.g. in time `(since, till)`."],["IteratorWrap","Represents wrapper for any iterator with ability to transpose `.next()` result."],["LimiterImpl","`Limiter` implementation based on `ValueStorage`."],["LinkedNode","Represents node of the dequeue."],["MailboxImpl","`Mailbox` implementation based on `DoubleMapStorage`."],["MailboxKeyGen","Key generator for `gear`’s mailbox implementation."],["QueueImpl","`Mailbox` implementation based on `Dequeue`."],["QueueKeyGen","Key generator for `gear`’s message queue implementation."],["TogglerImpl","`Toggler` implementation based on `ValueStorage`."],["WaitlistImpl","`Waitlist` implementation based on `DoubleMapStorage`."],["WaitlistKeyGen","Key generator for `gear`’s waitlist implementation."]],"trait":[["Callback","Represents callback action for cases `(&T) -> R`, where `R` is `()` by default."],["Counted","Represents default counting logic, by providing ability to return length of the object as specified (associated) type or answer the question is the object empty."],["CountedByKey","Represents default counting logic, by providing ability to return length of the object as specified (associated) type or answer the question is the object empty, by provided key of specified (associated) type."],["Counter","Represents logic of managing step-by-step changeable value."],["Dequeue","Represents dequeue implementation."],["DequeueCallbacks","Represents store of dequeue’s action callbacks."],["DequeueError","Represents dequeue error type."],["DoubleMapStorage","Represents logic of managing globally stored double-key map for more complicated logic."],["EmptyCallback","Represents callback action for cases without input and output."],["FallibleCallback","Represents callback action for cases `(&T) -> Result<R, E>`, where `R` is `()` by default and `E` is associated type `Error`."],["GetCallback","Represents callback action for cases without input for getting some data."],["IterableByKeyMap","Represents iterable logic for double key maps (Key1 -> Key2 -> Value)."],["IterableMap","Represents iterable logic for single key maps (Key -> Value)."],["KeyFor","Represents logic of providing key as specified (associated) type for given as specified (associated) type value by reference."],["KeyIterableByKeyMap","Represents iterable over second keys logic for double key maps (Key1 -> Key2 -> Value)."],["Limiter","Represents logic of limiting value decreasing."],["Mailbox","Represents mailbox managing logic."],["MailboxCallbacks","Represents store of mailbox’s action callbacks."],["MailboxError","Represents mailbox error type."],["MapStorage","Represents logic of managing globally stored single-key map for more complicated logic."],["Messenger","Represents messenger’s logic of centralized message processing behavior."],["Queue","Represents message queue managing logic."],["Toggler","Represents logic of providing access for some actions."],["TransposeCallback","Represents transposing callback for mutating values."],["ValueStorage","Represents logic of managing globally stored value for more complicated logic."],["Waitlist","Represents waitlist managing logic."],["WaitlistCallbacks","Represents store of waitlist’s action callbacks."],["WaitlistError","Represents waitlist error type."]]};