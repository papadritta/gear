window.SIDEBAR_ITEMS = {"fn":[["block_height","Get the current block height."],["block_timestamp","Get the current block timestamp."],["exit","Terminate the execution of a program. The program and all corresponding data are removed from the storage. This is similar to `std::process::exit`. `value_destination` specifies the address where all available to the program value should be transferred to. Maybe called in `init` method as well."],["gas_available","Get the current value of the gas available for execution."],["leave","Terminate the current message handling."],["origin","Return the id of original user who initiated communication with blockchain, during which, currently processing message was created."],["program_id","Return ID of the current program."],["random","Get the random seed, along with the time in the past since when it was determinable by chain observers. The random seed is determined from the random seed of the block with the message id as the subject."],["reserve_gas","Reserve gas for further usage."],["unreserve_gas","Unreserve gas using reservation ID"],["value_available","Get the total available value amount."],["wait","Pause the current message handling."],["wait_for","Same as [`wait`], but delays handling for given specific amount of blocks."],["wait_up_to","Same as [`wait`], but delays handling for maximal amount of blocks that could be payed, that doesnâ€™t exceed given duration."],["wake","Resume previously paused message handling."],["wake_delayed","Same as [`wake`], but wakes delayed."]]};